create table suppliers(
    SUPPNO VARCHAR(10),
    SNAME VARCHAR(10),
    SADDRESS VARCHAR(10),
    SCITY VARCHAR(10),
    SSTATE VARCHAR(10),
    SPHONE NUMBER(8),
    SBALANCE NUMBER(8)
);

CREATE TABLE ORDERS(
    ORDNO VARCHAR(10),
    ORDDATE DATE,
    ORDSUPPNO VARCHAR(10),
    ORDPARTNO VARCHAR(10),
    ORDQTY  NUMBER(10)
);

CREATE TABLE PARTS(
    PARTNO VARCHAR(10),
    PNAME VARCHAR(10),
    QTY NUMBER(10),
    PRICE NUMBER(10)
);

CREATE OR REPLACE TRIGGER TRIG_ORDER
BEFORE INSERT ON ORDERS
FOR EACH ROW
BEGIN
    IF :NEW.ORDSUPPNO = 'S002' AND :NEW.ORDQTY>100
    THEN
        RAISE_APPLICATION_ERROR(-20001,'S002 CANNOT HAVE ORDERS > 100 UNITS FOR PARTS.');
    END IF;
END;


CREATE OR REPLACE TRIGGER TRIG_SUPPLIER
BEFORE INSERT ON suppliers
FOR EACH ROW
DECLARE
    S_COUNT INTEGER;
BEGIN
    SELECT COUNT(*)
    INTO S_COUNT
    FROM suppliers
    where suppliers.SCITY=:NEW.SCITY;

    IF S_COUNT>0
    THEN
        RAISE_APPLICATION_ERROR(-20001,'TWO SUPPLIERS IN THE SAME CITY IS NOT POSSIBLE!.');
    END IF;
END;        


CREATE OR REPLACE TRIGGER TRIG_BALANCE
BEFORE INSERT ON ORDERS
FOR EACH ROW
DECLARE
      PRT_NO PARTS.PARTNO%TYPE;
      PRT_PRICE PARTS.PRICE%TYPE;
      PRT_QTY PARTS.QTY%TYPE;
      CUR_BAL suppliers.SBALANCE%TYPE;


BEGIN 
      SELECT PARTNO INTO PRT_NO
      FROM PARTS
      WHERE PARTNO=:NEW.ORDPARTNO;

      SELECT PRICE INTO PRT_PRICE
      FROM PARTS
      WHERE PARTNO=:NEW.ORDPARTNO;

      SELECT QTY INTO PRT_QTY
      FROM PARTS
      WHERE PARTNO=:NEW.ORDPARTNO;

      SELECT SBALANCE INTO CUR_BAL
      FROM suppliers
      WHERE SUPPNO=:NEW.ORDSUPPNO;

      IF PRT_QTY < :NEW.ORDQTY
      THEN
          RAISE_APPLICATION_ERROR(-20001,'NOT ENOUGH PARTS ARE AVAILABLE!!');
      END IF;

      IF :NEW.ORDQTY * PRT_PRICE > CUR_BAL
      THEN
          RAISE_APPLICATION_ERROR(-20001,'NOT ENOUGH BALANCE TO PLACE ORDER.');
      END IF;
END;            


INSERT INTO PARTS VALUES('P001','PART1',8,2000);
INSERT INTO PARTS VALUES('P002','PART2',50,3000);
INSERT INTO PARTS VALUES('P003','PART3',40,6000);
INSERT INTO PARTS VALUES('P004','PART4',70,7000);
INSERT INTO PARTS VALUES('P005','PART5',60,8000);



INSERT INTO SUPPLIERS VALUES('S001','SUP1','ADD1','KOCHI','KERALA',856858,2000);

INSERT INTO SUPPLIERS VALUES('S002','SUP2','ADD2','KLM','KERALA',851858,3000);

INSERT INTO SUPPLIERS VALUES('S003','SUP3','ADD3','PKD','KERALA',856858,4000);

INSERT INTO SUPPLIERS VALUES('S004','SUP4','ADD4','TVM','KERALA',852858,5000);

INSERT INTO SUPPLIERS VALUES('S005','SUP5','ADD5','KTM','KERALA',854858,6000);

INSERT INTO ORDERS  VALUES('ORD1','12-DEC-21','S001','P001',1);
INSERT INTO ORDERS  VALUES('ORD2','11-DEC-21','S002','P002',1);

DECLARE
    CURSOR SAL_CURS
    IS
       SELECT EMPID,SALARY
       FROM EMPLOYEE
       WHERE SALARY<10000 
       OR(SALARY>= 10000 AND SALARY <30000)
       OR(SALARY>=30000 AND SALARY <60000);

    EID EMPLOYEE.EMPID%TYPE;
    SAL EMPLOYEE.SALARY%TYPE;
BEGIN
    OPEN SAL_CURS;
    LOOP
       FETCH SAL_CURS INTO EID,SAL;
       EXIT WHEN SAL_CURS%NOTFOUND;
       IF SAL<10000
       THEN
           UPDATE EMPLOYEE 
           SET SALARY=15000
           WHERE EMPID=EID;
       ELSIF SAL>=10000 AND SAL<30000
       THEN
           UPDATE EMPLOYEE
           SET SALARY=35000
           WHERE EMPID=EID;
        ELSIF SAL>=30000 AND SAL<60000
        THEN
           UPDATE EMPLOYEE
           SET SALARY=65000
           WHERE EMPID=EID;
        END IF;
    END LOOP;
    DBMS_OUTPUT.PUT_LINE(SAL_CURS%ROWCOUNT || 'RECORDS UPDATED.');
END;                     
